{"ast":null,"code":"var _jsxFileName = \"/Users/aparnar/CascadeProjects/streaming-platform/frontend/src/contexts/AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { authService } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // No initial auth check - we'll rely on the login response\n  useEffect(() => {\n    // Check for existing token on mount\n    const token = localStorage.getItem('accessToken');\n    if (!token) {\n      setLoading(false);\n    }\n  }, []);\n  const login = async (username, password) => {\n    try {\n      if (!username || !password) {\n        return {\n          success: false,\n          message: 'Please enter both username and password'\n        };\n      }\n      setLoading(true);\n      const response = await authService.login({\n        username,\n        password\n      });\n      if (response.success && response.data) {\n        setUser(response.data);\n        return {\n          success: true\n        };\n      }\n      return {\n        success: false,\n        message: response.message || 'Invalid username or password'\n      };\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Login failed:', error);\n      return {\n        success: false,\n        message: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'An error occurred during login'\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const logout = async () => {\n    try {\n      setLoading(true);\n      await authService.logout();\n      setUser(null);\n      // Clear any stored tokens\n      localStorage.removeItem('accessToken');\n    } catch (error) {\n      console.error('Logout failed:', error);\n      throw error; // Re-throw to allow error handling in components\n    } finally {\n      setLoading(false);\n    }\n  };\n  const value = {\n    user,\n    login,\n    logout,\n    loading,\n    checkAuthStatus // Expose checkAuthStatus for manual refreshes\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 10\n  }, this);\n};\n_s2(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","authService","jsxDEV","_jsxDEV","AuthContext","undefined","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","token","localStorage","getItem","login","username","password","success","message","response","data","error","_error$response","_error$response$data","console","logout","removeItem","value","checkAuthStatus","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/aparnar/CascadeProjects/streaming-platform/frontend/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode, useCallback } from 'react';\nimport { User, AuthContextType, LoginResponse } from '../types';\nimport { authService } from '../services/api';\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const useAuth = (): AuthContextType => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  // No initial auth check - we'll rely on the login response\n  useEffect(() => {\n    // Check for existing token on mount\n    const token = localStorage.getItem('accessToken');\n    if (!token) {\n      setLoading(false);\n    }\n  }, []);\n\n  const login = async (username: string, password: string): Promise<LoginResponse> => {\n    try {\n      if (!username || !password) {\n        return { success: false, message: 'Please enter both username and password' };\n      }\n      \n      setLoading(true);\n      const response = await authService.login({ username, password });\n      \n      if (response.success && response.data) {\n        setUser(response.data);\n        return { success: true };\n      }\n      \n      return { \n        success: false, \n        message: response.message || 'Invalid username or password' \n      };\n      \n    } catch (error: any) {\n      console.error('Login failed:', error);\n      return { \n        success: false, \n        message: error.response?.data?.message || 'An error occurred during login' \n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const logout = async (): Promise<void> => {\n    try {\n      setLoading(true);\n      await authService.logout();\n      setUser(null);\n      // Clear any stored tokens\n      localStorage.removeItem('accessToken');\n    } catch (error) {\n      console.error('Logout failed:', error);\n      throw error; // Re-throw to allow error handling in components\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const value: AuthContextType = {\n    user,\n    login,\n    logout,\n    loading,\n    checkAuthStatus, // Expose checkAuthStatus for manual refreshes\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}