{"ast":null,"code":"var _jsxFileName = \"/Users/aparnar/CascadeProjects/streaming-platform/frontend/src/contexts/AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { authService } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // No initial auth check - we'll rely on the login response\n  useEffect(() => {\n    // Check for existing token on mount\n    const token = localStorage.getItem('accessToken');\n    if (!token) {\n      setLoading(false);\n    }\n  }, []);\n  const login = async (username, password) => {\n    try {\n      if (!username || !password) {\n        return {\n          success: false,\n          message: 'Please enter both username and password'\n        };\n      }\n      setLoading(true);\n      console.log('AuthContext: Attempting login...');\n      const response = await authService.login({\n        username,\n        password\n      });\n      console.log('AuthContext: Login response received:', response);\n      if (response.success) {\n        // If we have user data in the response, use it\n        if (response.data) {\n          setUser(response.data);\n          console.log('AuthContext: User set from login response');\n        } else if (response.success) {\n          // If login was successful but no user data, create a minimal user object\n          const minimalUser = {\n            id: 0,\n            // Temporary ID, should be replaced by actual ID from backend\n            username,\n            email: `${username}@example.com` // Default email since it's required\n          };\n          setUser(minimalUser);\n          console.log('AuthContext: Created minimal user from username');\n        }\n        return {\n          success: true\n        };\n      }\n\n      // If we get here, login was not successful\n      const errorMessage = response.message || 'Invalid username or password';\n      console.error('AuthContext: Login failed:', errorMessage);\n      return {\n        success: false,\n        message: errorMessage\n      };\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('AuthContext: Login error:', error);\n      const errorMessage = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.message || 'An unexpected error occurred during login';\n      return {\n        success: false,\n        message: errorMessage\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const logout = async () => {\n    try {\n      setLoading(true);\n      await authService.logout();\n      setUser(null);\n      // Clear any stored tokens\n      localStorage.removeItem('accessToken');\n    } catch (error) {\n      console.error('Logout failed:', error);\n      throw error; // Re-throw to allow error handling in components\n    } finally {\n      setLoading(false);\n    }\n  };\n  const value = {\n    user,\n    login,\n    logout,\n    loading,\n    checkAuthStatus: async () => {\n      // This is a no-op now since we're not using /auth/me\n      // It's kept for backward compatibility\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 10\n  }, this);\n};\n_s2(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","authService","jsxDEV","_jsxDEV","AuthContext","undefined","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","token","localStorage","getItem","login","username","password","success","message","console","log","response","data","minimalUser","id","email","errorMessage","error","_error$response","_error$response$data","logout","removeItem","value","checkAuthStatus","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/aparnar/CascadeProjects/streaming-platform/frontend/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode, useCallback } from 'react';\nimport { User, AuthContextType, LoginResponse } from '../types';\nimport { authService } from '../services/api';\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const useAuth = (): AuthContextType => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  // No initial auth check - we'll rely on the login response\n  useEffect(() => {\n    // Check for existing token on mount\n    const token = localStorage.getItem('accessToken');\n    if (!token) {\n      setLoading(false);\n    }\n  }, []);\n\n  const login = async (username: string, password: string): Promise<LoginResponse> => {\n    try {\n      if (!username || !password) {\n        return { success: false, message: 'Please enter both username and password' };\n      }\n      \n      setLoading(true);\n      console.log('AuthContext: Attempting login...');\n      const response = await authService.login({ username, password });\n      console.log('AuthContext: Login response received:', response);\n      \n      if (response.success) {\n        // If we have user data in the response, use it\n        if (response.data) {\n          setUser(response.data);\n          console.log('AuthContext: User set from login response');\n        } else if (response.success) {\n          // If login was successful but no user data, create a minimal user object\n          const minimalUser: User = { \n            id: 0, // Temporary ID, should be replaced by actual ID from backend\n            username,\n            email: `${username}@example.com` // Default email since it's required\n          };\n          setUser(minimalUser);\n          console.log('AuthContext: Created minimal user from username');\n        }\n        return { success: true };\n      }\n      \n      // If we get here, login was not successful\n      const errorMessage = response.message || 'Invalid username or password';\n      console.error('AuthContext: Login failed:', errorMessage);\n      return { \n        success: false, \n        message: errorMessage\n      };\n      \n    } catch (error: any) {\n      console.error('AuthContext: Login error:', error);\n      const errorMessage = error.response?.data?.message || \n                         error.message || \n                         'An unexpected error occurred during login';\n      return { \n        success: false, \n        message: errorMessage\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const logout = async (): Promise<void> => {\n    try {\n      setLoading(true);\n      await authService.logout();\n      setUser(null);\n      // Clear any stored tokens\n      localStorage.removeItem('accessToken');\n    } catch (error) {\n      console.error('Logout failed:', error);\n      throw error; // Re-throw to allow error handling in components\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const value: AuthContextType = {\n    user,\n    login,\n    logout,\n    loading,\n    checkAuthStatus: async () => {\n      // This is a no-op now since we're not using /auth/me\n      // It's kept for backward compatibility\n    },\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}