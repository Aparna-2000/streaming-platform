{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n\n// Helper function to handle API errors\nconst handleApiError = (error, defaultMessage) => {\n  var _error$response, _error$response$data;\n  console.error('API Error:', error);\n  return {\n    success: false,\n    message: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.message || defaultMessage\n  };\n};\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  withCredentials: true // Important for cookies/sessions\n});\n\n// Add auth token to requests if it exists\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('accessToken');\n  if (token) {\n    config.headers = config.headers || {};\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Handle 401 responses\napi.interceptors.response.use(response => response, error => {\n  var _error$response2;\n  if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 401) {\n    localStorage.removeItem('accessToken');\n    if (!window.location.pathname.includes('/login')) {\n      window.location.href = '/login';\n    }\n  }\n  return Promise.reject(error);\n});\nconst authService = {\n  async login(credentials) {\n    try {\n      var _response$data$data;\n      console.log('ðŸ”‘ Attempting login with credentials:', credentials);\n      const response = await api.post('/auth/login', credentials);\n      console.log('âœ… Login response:', response.data);\n      if (response.data.success && (_response$data$data = response.data.data) !== null && _response$data$data !== void 0 && _response$data$data.accessToken) {\n        localStorage.setItem('accessToken', response.data.data.accessToken);\n      }\n      return response.data;\n    } catch (error) {\n      return handleApiError(error, 'Login failed. Please check your credentials and try again.');\n    }\n  },\n  async logout() {\n    try {\n      await api.post('/auth/logout');\n      localStorage.removeItem('accessToken');\n      return {\n        success: true\n      };\n    } catch (error) {\n      return handleApiError(error, 'Logout failed');\n    }\n  },\n  async refreshToken() {\n    try {\n      var _response$data$data2;\n      const response = await api.post('/auth/refresh-token');\n      if (response.data.success && (_response$data$data2 = response.data.data) !== null && _response$data$data2 !== void 0 && _response$data$data2.accessToken) {\n        localStorage.setItem('accessToken', response.data.data.accessToken);\n      }\n      return response.data;\n    } catch (error) {\n      localStorage.removeItem('accessToken');\n      throw error;\n    }\n  },\n  getCurrentUser() {\n    const token = localStorage.getItem('accessToken');\n    if (!token) return null;\n\n    // In a real app, you would decode the JWT or make an API call to get user info\n    // For now, return a minimal user object\n    return {\n      id: 0,\n      username: 'user',\n      email: 'user@example.com'\n    };\n  },\n  isAuthenticated() {\n    return !!localStorage.getItem('accessToken');\n  }\n};\nconst weatherService = {\n  async getWeatherData(city = 'London') {\n    try {\n      // Mock data for testing\n      const mockWeatherData = {\n        location: city,\n        current: {\n          temperature: Math.round(15 + Math.random() * 10),\n          humidity: 60 + Math.round(Math.random() * 30),\n          description: ['Sunny', 'Partly Cloudy', 'Cloudy', 'Rainy'][Math.floor(Math.random() * 4)],\n          icon: ['01d', '02d', '03d', '09d', '10d', '11d', '13d', '50d'][Math.floor(Math.random() * 8)]\n        },\n        forecast: Array(5).fill(0).map((_, i) => {\n          const date = new Date();\n          date.setDate(date.getDate() + i + 1);\n          return {\n            date: date.toISOString(),\n            temperature: {\n              min: Math.round(10 + Math.random() * 10),\n              max: Math.round(20 + Math.random() * 10)\n            },\n            description: ['Sunny', 'Partly Cloudy', 'Cloudy', 'Rainy', 'Thunderstorm'][Math.floor(Math.random() * 5)],\n            icon: ['01d', '02d', '03d', '09d', '10d', '11d', '13d', '50d'][Math.floor(Math.random() * 8)]\n          };\n        })\n      };\n\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 500));\n      return {\n        success: true,\n        data: mockWeatherData\n      };\n    } catch (error) {\n      return handleApiError(error, 'Failed to fetch weather data');\n    }\n  }\n};\n\n// Export services\nexport { authService, weatherService };\n\n// Export the api instance as default\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","handleApiError","error","defaultMessage","_error$response","_error$response$data","console","success","message","response","data","api","create","baseURL","headers","withCredentials","interceptors","request","use","config","token","localStorage","getItem","Authorization","_error$response2","status","removeItem","window","location","pathname","includes","href","Promise","reject","authService","login","credentials","_response$data$data","log","post","accessToken","setItem","logout","refreshToken","_response$data$data2","getCurrentUser","id","username","email","isAuthenticated","weatherService","getWeatherData","city","mockWeatherData","current","temperature","Math","round","random","humidity","description","floor","icon","forecast","Array","fill","map","_","i","date","Date","setDate","getDate","toISOString","min","max","resolve","setTimeout"],"sources":["/Users/aparnar/CascadeProjects/streaming-platform/frontend/src/services/api.ts"],"sourcesContent":["import axios, { AxiosError, InternalAxiosRequestConfig, AxiosResponse } from 'axios';\nimport { User, LoginFormData, ApiResponse, WeatherData } from '../types';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n\n// Helper function to handle API errors\nconst handleApiError = (error: any, defaultMessage: string) => {\n  console.error('API Error:', error);\n  return {\n    success: false,\n    message: error.response?.data?.message || error.message || defaultMessage,\n  };\n};\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  withCredentials: true, // Important for cookies/sessions\n});\n\n// Add auth token to requests if it exists\napi.interceptors.request.use((config: InternalAxiosRequestConfig) => {\n  const token = localStorage.getItem('accessToken');\n  if (token) {\n    config.headers = config.headers || {};\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Handle 401 responses\napi.interceptors.response.use(\n  (response: AxiosResponse) => response,\n  (error: AxiosError) => {\n    if (error.response?.status === 401) {\n      localStorage.removeItem('accessToken');\n      if (!window.location.pathname.includes('/login')) {\n        window.location.href = '/login';\n      }\n    }\n    return Promise.reject(error);\n  }\n);\n\nconst authService = {\n  async login(credentials: LoginFormData): Promise<ApiResponse<{ user: User; accessToken: string }>> {\n    try {\n      console.log('ðŸ”‘ Attempting login with credentials:', credentials);\n      const response = await api.post('/auth/login', credentials);\n      console.log('âœ… Login response:', response.data);\n      \n      if (response.data.success && response.data.data?.accessToken) {\n        localStorage.setItem('accessToken', response.data.data.accessToken);\n      }\n      return response.data;\n    } catch (error: any) {\n      return handleApiError(error, 'Login failed. Please check your credentials and try again.');\n    }\n  },\n\n  async logout(): Promise<{ success: boolean; message?: string }> {\n    try {\n      await api.post('/auth/logout');\n      localStorage.removeItem('accessToken');\n      return { success: true };\n    } catch (error: any) {\n      return handleApiError(error, 'Logout failed');\n    }\n  },\n\n  async refreshToken(): Promise<ApiResponse<{ accessToken: string }>> {\n    try {\n      const response = await api.post('/auth/refresh-token');\n      if (response.data.success && response.data.data?.accessToken) {\n        localStorage.setItem('accessToken', response.data.data.accessToken);\n      }\n      return response.data;\n    } catch (error: any) {\n      localStorage.removeItem('accessToken');\n      throw error;\n    }\n  },\n\n  getCurrentUser(): User | null {\n    const token = localStorage.getItem('accessToken');\n    if (!token) return null;\n    \n    // In a real app, you would decode the JWT or make an API call to get user info\n    // For now, return a minimal user object\n    return {\n      id: 0,\n      username: 'user',\n      email: 'user@example.com'\n    };\n  },\n\n  isAuthenticated(): boolean {\n    return !!localStorage.getItem('accessToken');\n  }\n};\n\nconst weatherService = {\n  async getWeatherData(city: string = 'London'): Promise<ApiResponse<WeatherData>> {\n    try {\n      // Mock data for testing\n      const mockWeatherData: WeatherData = {\n        location: city,\n        current: {\n          temperature: Math.round(15 + Math.random() * 10),\n          humidity: 60 + Math.round(Math.random() * 30),\n          description: ['Sunny', 'Partly Cloudy', 'Cloudy', 'Rainy'][Math.floor(Math.random() * 4)],\n          icon: ['01d', '02d', '03d', '09d', '10d', '11d', '13d', '50d'][Math.floor(Math.random() * 8)]\n        },\n        forecast: Array(5).fill(0).map((_, i) => {\n          const date = new Date();\n          date.setDate(date.getDate() + i + 1);\n          return {\n            date: date.toISOString(),\n            temperature: {\n              min: Math.round(10 + Math.random() * 10),\n              max: Math.round(20 + Math.random() * 10)\n            },\n            description: ['Sunny', 'Partly Cloudy', 'Cloudy', 'Rainy', 'Thunderstorm'][Math.floor(Math.random() * 5)],\n            icon: ['01d', '02d', '03d', '09d', '10d', '11d', '13d', '50d'][Math.floor(Math.random() * 8)]\n          };\n        })\n      };\n      \n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 500));\n      \n      return {\n        success: true,\n        data: mockWeatherData\n      };\n    } catch (error: any) {\n      return handleApiError(error, 'Failed to fetch weather data');\n    }\n  },\n};\n\n// Export services\nexport { authService, weatherService };\n\n// Export the api instance as default\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}