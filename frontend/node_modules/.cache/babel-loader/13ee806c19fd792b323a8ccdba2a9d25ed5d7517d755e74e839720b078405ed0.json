{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  withCredentials: true // Important for cookies/sessions\n});\n\n// Add auth token to requests if it exists\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('accessToken');\n  if (token) {\n    config.headers = config.headers || {};\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Handle 401 responses\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('accessToken');\n    if (!window.location.pathname.includes('/login')) {\n      window.location.href = '/login';\n    }\n  }\n  return Promise.reject(error);\n});\nconst authService = {\n  async login(credentials) {\n    try {\n      var _response$data$data;\n      console.log('ðŸ”‘ Attempting login with credentials:', credentials);\n      const response = await api.post('/auth/login', credentials);\n      console.log('âœ… Login response:', response.data);\n      if (response.data.success && (_response$data$data = response.data.data) !== null && _response$data$data !== void 0 && _response$data$data.accessToken) {\n        localStorage.setItem('accessToken', response.data.data.accessToken);\n      }\n      return response.data;\n    } catch (error) {\n      return handleApiError(error, 'Login failed. Please check your credentials and try again.');\n    }\n  },\n  async logout() {\n    try {\n      await api.post('/auth/logout');\n      localStorage.removeItem('accessToken');\n      return {\n        success: true\n      };\n    } catch (error) {\n      return handleApiError(error, 'Logout failed');\n    }\n  },\n  async refreshToken() {\n    try {\n      var _response$data$data2;\n      const response = await api.post('/auth/refresh-token');\n      if (response.data.success && (_response$data$data2 = response.data.data) !== null && _response$data$data2 !== void 0 && _response$data$data2.accessToken) {\n        localStorage.setItem('accessToken', response.data.data.accessToken);\n      }\n      return response.data;\n    } catch (error) {\n      localStorage.removeItem('accessToken');\n      throw error;\n    }\n  },\n  getCurrentUser() {\n    const token = localStorage.getItem('accessToken');\n    if (!token) return null;\n\n    // In a real app, you would decode the JWT or make an API call to get user info\n    // For now, return a minimal user object\n    return {\n      id: 0,\n      username: 'user',\n      email: 'user@example.com'\n    };\n  },\n  isAuthenticated() {\n    return !!localStorage.getItem('accessToken');\n  }\n};\nconst weatherService = {\n  async getWeatherData(city = 'London') {\n    try {\n      const response = await api.get(`/weather?city=${encodeURIComponent(city)}`);\n      return response.data;\n    } catch (error) {\n      return handleApiError(error, 'Failed to fetch weather data');\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","withCredentials","interceptors","request","use","config","token","localStorage","getItem","Authorization","response","error","_error$response","status","removeItem","window","location","pathname","includes","href","Promise","reject","authService","login","credentials","_response$data$data","console","log","post","data","success","accessToken","setItem","handleApiError","logout","refreshToken","_response$data$data2","getCurrentUser","id","username","email","isAuthenticated","weatherService","getWeatherData","city","get","encodeURIComponent"],"sources":["/Users/aparnar/CascadeProjects/streaming-platform/frontend/src/services/api.ts"],"sourcesContent":["import axios, { AxiosError, InternalAxiosRequestConfig, AxiosResponse } from 'axios';\nimport { User, LoginFormData, ApiResponse } from '../types';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  withCredentials: true, // Important for cookies/sessions\n});\n\n// Add auth token to requests if it exists\napi.interceptors.request.use((config: InternalAxiosRequestConfig) => {\n  const token = localStorage.getItem('accessToken');\n  if (token) {\n    config.headers = config.headers || {};\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Handle 401 responses\napi.interceptors.response.use(\n  (response: AxiosResponse) => response,\n  (error: AxiosError) => {\n    if (error.response?.status === 401) {\n      localStorage.removeItem('accessToken');\n      if (!window.location.pathname.includes('/login')) {\n        window.location.href = '/login';\n      }\n    }\n    return Promise.reject(error);\n  }\n);\n\nconst authService = {\n  async login(credentials: LoginFormData): Promise<ApiResponse<{ user: User; accessToken: string }>> {\n    try {\n      console.log('ðŸ”‘ Attempting login with credentials:', credentials);\n      const response = await api.post('/auth/login', credentials);\n      console.log('âœ… Login response:', response.data);\n      \n      if (response.data.success && response.data.data?.accessToken) {\n        localStorage.setItem('accessToken', response.data.data.accessToken);\n      }\n      return response.data;\n    } catch (error: any) {\n      return handleApiError(error, 'Login failed. Please check your credentials and try again.');\n    }\n  },\n\n  async logout(): Promise<{ success: boolean; message?: string }> {\n    try {\n      await api.post('/auth/logout');\n      localStorage.removeItem('accessToken');\n      return { success: true };\n    } catch (error: any) {\n      return handleApiError(error, 'Logout failed');\n    }\n  },\n\n  async refreshToken(): Promise<ApiResponse<{ accessToken: string }>> {\n    try {\n      const response = await api.post('/auth/refresh-token');\n      if (response.data.success && response.data.data?.accessToken) {\n        localStorage.setItem('accessToken', response.data.data.accessToken);\n      }\n      return response.data;\n    } catch (error: any) {\n      localStorage.removeItem('accessToken');\n      throw error;\n    }\n  },\n\n  getCurrentUser(): User | null {\n    const token = localStorage.getItem('accessToken');\n    if (!token) return null;\n    \n    // In a real app, you would decode the JWT or make an API call to get user info\n    // For now, return a minimal user object\n    return {\n      id: 0,\n      username: 'user',\n      email: 'user@example.com'\n    };\n  },\n\n  isAuthenticated(): boolean {\n    return !!localStorage.getItem('accessToken');\n  }\n};\n\nconst weatherService = {\n  async getWeatherData(city: string = 'London'): Promise<ApiResponse<any>> {\n    try {\n      const response = await api.get(`/weather?city=${encodeURIComponent(city)}`);\n      return response.data;\n    } catch (error: any) {\n      return handleApiError(error, 'Failed to fetch weather data');\n    }\n  },\n};\n\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}