{"ast":null,"code":"var _jsxFileName = \"/Users/aparnar/CascadeProjects/streaming-platform/frontend/src/contexts/AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { authService } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Check for existing session on component mount\n  useEffect(() => {\n    const checkAuthStatus = async () => {\n      try {\n        setLoading(true);\n        const response = await authService.getCurrentUser();\n        if (response.success && response.data) {\n          setUser(response.data);\n        }\n      } catch (error) {\n        console.error('Session check failed:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    checkAuthStatus();\n  }, []);\n  const login = async (username, password) => {\n    try {\n      setLoading(true);\n      const response = await authService.login({\n        username,\n        password\n      });\n      if (response.success && response.data) {\n        setUser(response.data);\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('Login failed:', error);\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const logout = async () => {\n    try {\n      setLoading(true);\n      await authService.logout();\n      setUser(null);\n    } catch (error) {\n      console.error('Logout failed:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const value = {\n    user,\n    login,\n    logout,\n    loading\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 10\n  }, this);\n};\n_s2(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","authService","jsxDEV","_jsxDEV","AuthContext","undefined","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","checkAuthStatus","response","getCurrentUser","success","data","error","console","login","username","password","logout","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/aparnar/CascadeProjects/streaming-platform/frontend/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { User, AuthContextType } from '../types';\nimport { authService } from '../services/api';\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const useAuth = (): AuthContextType => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  // Check for existing session on component mount\n  useEffect(() => {\n    const checkAuthStatus = async () => {\n      try {\n        setLoading(true);\n        const response = await authService.getCurrentUser();\n        if (response.success && response.data) {\n          setUser(response.data);\n        }\n      } catch (error) {\n        console.error('Session check failed:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    checkAuthStatus();\n  }, []);\n\n  const login = async (username: string, password: string): Promise<boolean> => {\n    try {\n      setLoading(true);\n      const response = await authService.login({ username, password });\n      if (response.success && response.data) {\n        setUser(response.data);\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('Login failed:', error);\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const logout = async () => {\n    try {\n      setLoading(true);\n      await authService.logout();\n      setUser(null);\n    } catch (error) {\n      console.error('Logout failed:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const value: AuthContextType = {\n    user,\n    login,\n    logout,\n    loading,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}