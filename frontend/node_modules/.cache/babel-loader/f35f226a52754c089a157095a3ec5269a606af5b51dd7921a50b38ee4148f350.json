{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  withCredentials: true,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nlet isRefreshing = false;\nlet failedQueue = [];\nconst processQueue = (error, token = null) => {\n  failedQueue.forEach(prom => {\n    if (error) {\n      prom.reject(error);\n    } else {\n      prom.resolve(token);\n    }\n  });\n  failedQueue = [];\n};\napi.interceptors.request.use(config => {\n  var _document$querySelect;\n  const csrfToken = (_document$querySelect = document.querySelector('meta[name=\"csrf-token\"]')) === null || _document$querySelect === void 0 ? void 0 : _document$querySelect.getAttribute('content');\n  if (csrfToken) {\n    config.headers['X-CSRF-Token'] = csrfToken;\n  }\n  return config;\n});\napi.interceptors.response.use(response => response, async error => {\n  var _error$response, _error$response2;\n  const originalRequest = error.config;\n\n  // Add this check to ensure originalRequest is not undefined\n  if (!originalRequest) {\n    return Promise.reject(error);\n  }\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 && originalRequest.url !== '/auth/login' && originalRequest.url !== '/auth/refresh-token') {\n    if (isRefreshing) {\n      return new Promise((resolve, reject) => {\n        failedQueue.push({\n          resolve,\n          reject\n        });\n      });\n    }\n    isRefreshing = true;\n    try {\n      var _response$data;\n      const response = await authService.refreshToken();\n      const newAccessToken = (_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.accessToken;\n      if (newAccessToken) {\n        isRefreshing = false;\n        originalRequest.headers['Authorization'] = `Bearer ${newAccessToken}`;\n        processQueue(null, newAccessToken);\n        return api(originalRequest);\n      }\n    } catch (refreshError) {\n      isRefreshing = false;\n      processQueue(refreshError);\n      window.location.href = '/login';\n      return Promise.reject(refreshError);\n    }\n  }\n  if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 401 && window.location.pathname !== '/login') {\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\nexport const authService = {\n  async login(credentials) {\n    try {\n      const response = await api.post('/auth/login', credentials);\n      return response.data;\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      return {\n        success: false,\n        message: ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Login failed'\n      };\n    }\n  },\n  async logout() {\n    try {\n      const response = await api.post('/auth/logout');\n      return response.data;\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      return {\n        success: false,\n        message: ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Logout failed'\n      };\n    }\n  },\n  async getCurrentUser() {\n    try {\n      const response = await api.get('/auth/me');\n      return response.data;\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      return {\n        success: false,\n        message: ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || 'Failed to get user info'\n      };\n    }\n  },\n  async refreshToken() {\n    try {\n      const response = await api.post('/auth/refresh-token');\n      return response.data;\n    } catch (error) {\n      var _error$response6, _error$response6$data;\n      return {\n        success: false,\n        message: ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.message) || 'Token refresh failed'\n      };\n    }\n  }\n};\nexport const weatherService = {\n  async getWeatherData(city = 'London') {\n    try {\n      const response = await api.get(`/weather?city=${encodeURIComponent(city)}`);\n      return response.data;\n    } catch (error) {\n      var _error$response7, _error$response7$data;\n      return {\n        success: false,\n        message: ((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : (_error$response7$data = _error$response7.data) === null || _error$response7$data === void 0 ? void 0 : _error$response7$data.message) || 'Failed to fetch weather data'\n      };\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","withCredentials","headers","isRefreshing","failedQueue","processQueue","error","token","forEach","prom","reject","resolve","interceptors","request","use","config","_document$querySelect","csrfToken","document","querySelector","getAttribute","response","_error$response","_error$response2","originalRequest","Promise","status","url","push","_response$data","authService","refreshToken","newAccessToken","data","accessToken","refreshError","window","location","href","pathname","login","credentials","post","_error$response3","_error$response3$data","success","message","logout","_error$response4","_error$response4$data","getCurrentUser","get","_error$response5","_error$response5$data","_error$response6","_error$response6$data","weatherService","getWeatherData","city","encodeURIComponent","_error$response7","_error$response7$data"],"sources":["/Users/aparnar/CascadeProjects/streaming-platform/frontend/src/services/api.ts"],"sourcesContent":["import axios, { AxiosError } from 'axios';\nimport { User, LoginFormData, WeatherData, ApiResponse } from '../types';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  withCredentials: true,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\nlet isRefreshing = false;\nlet failedQueue: { resolve: (value: any) => void; reject: (reason?: any) => void; }[] = [];\n\nconst processQueue = (error: AxiosError | null, token: string | null = null) => {\n  failedQueue.forEach(prom => {\n    if (error) {\n      prom.reject(error);\n    } else {\n      prom.resolve(token);\n    }\n  });\n  failedQueue = [];\n};\n\napi.interceptors.request.use((config) => {\n  const csrfToken = document.querySelector('meta[name=\"csrf-token\"]')?.getAttribute('content');\n  if (csrfToken) {\n    config.headers['X-CSRF-Token'] = csrfToken;\n  }\n  return config;\n});\n\napi.interceptors.response.use(\n  (response) => response,\n  async (error: AxiosError) => {\n    const originalRequest = error.config;\n    \n    // Add this check to ensure originalRequest is not undefined\n    if (!originalRequest) {\n      return Promise.reject(error);\n    }\n\n    if (error.response?.status === 401 && originalRequest.url !== '/auth/login' && originalRequest.url !== '/auth/refresh-token') {\n      if (isRefreshing) {\n        return new Promise((resolve, reject) => {\n          failedQueue.push({ resolve, reject });\n        });\n      }\n\n      isRefreshing = true;\n\n      try {\n        const response = await authService.refreshToken();\n        const newAccessToken = response.data?.accessToken;\n\n        if (newAccessToken) {\n          isRefreshing = false;\n          originalRequest.headers['Authorization'] = `Bearer ${newAccessToken}`;\n          processQueue(null, newAccessToken);\n          return api(originalRequest);\n        }\n      } catch (refreshError) {\n        isRefreshing = false;\n        processQueue(refreshError as AxiosError);\n        window.location.href = '/login';\n        return Promise.reject(refreshError);\n      }\n    }\n    \n    if (error.response?.status === 401 && window.location.pathname !== '/login') {\n      window.location.href = '/login';\n    }\n\n    return Promise.reject(error);\n  }\n);\n\nexport const authService = {\n  async login(credentials: LoginFormData): Promise<ApiResponse<User>> {\n    try {\n      const response = await api.post('/auth/login', credentials);\n      return response.data;\n    } catch (error: any) {\n      return {\n        success: false,\n        message: error.response?.data?.message || 'Login failed',\n      };\n    }\n  },\n\n  async logout(): Promise<ApiResponse<null>> {\n    try {\n      const response = await api.post('/auth/logout');\n      return response.data;\n    } catch (error: any) {\n      return {\n        success: false,\n        message: error.response?.data?.message || 'Logout failed',\n      };\n    }\n  },\n\n  async getCurrentUser(): Promise<ApiResponse<User>> {\n    try {\n      const response = await api.get('/auth/me');\n      return response.data;\n    } catch (error: any) {\n      return {\n        success: false,\n        message: error.response?.data?.message || 'Failed to get user info',\n      };\n    }\n  },\n\n  async refreshToken(): Promise<ApiResponse<User & { accessToken: string }>> {\n    try {\n      const response = await api.post('/auth/refresh-token');\n      return response.data;\n    } catch (error: any) {\n      return {\n        success: false,\n        message: error.response?.data?.message || 'Token refresh failed',\n      };\n    }\n  }\n};\n\nexport const weatherService = {\n  async getWeatherData(city: string = 'London'): Promise<ApiResponse<WeatherData>> {\n    try {\n      const response = await api.get(`/weather?city=${encodeURIComponent(city)}`);\n      return response.data;\n    } catch (error: any) {\n      return {\n        success: false,\n        message: error.response?.data?.message || 'Failed to fetch weather data',\n      };\n    }\n  },\n};\n\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}